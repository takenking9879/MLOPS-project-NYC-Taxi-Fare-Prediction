name: CI/CD Compose + ECR

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'README.md' ]

permissions:
  contents: read

env:
  IMAGE_TAG: latest

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint code
        run: echo "Linting repository"
      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Build & Push Flask Image to ECR
    needs: integration
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag and push image
        id: build-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Building image $IMAGE"
          docker build --pull -f Dockerfile.flask -t "$IMAGE" .
          docker push "$IMAGE"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to ECR on runner
        uses: aws-actions/amazon-ecr-login@v1
      - name: Pull & up compose
        run: |
          IMAGE=${{ needs.build-and-push-ecr-image.outputs.image }}
          if [ -z "$IMAGE" ]; then
            echo "ERROR: FLASK_IMAGE is empty. Exiting."
            exit 1
          fi

          cd "${{ github.workspace }}"
          export FLASK_IMAGE="$IMAGE"

          if command -v docker-compose >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD="docker-compose"
          else
            DOCKER_COMPOSE_CMD="docker compose"
          fi

          $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml pull flask
          $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml up -d --remove-orphans
