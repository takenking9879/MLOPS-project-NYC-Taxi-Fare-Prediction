name: CI/CD Compose + ECR

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'README.md' ]

permissions:
  contents: read

env:
  IMAGE_TAG: latest

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Build & Push Flask Image to ECR
    needs: integration
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-output-image.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Flask image
        id: build-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          echo "Building image ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          docker build --pull -f Dockerfile.flask -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          echo "image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Push image to ECR
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

      - name: Set image output
        id: set-output-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  deploy:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Pull & up compose
        run: |
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE=${{ needs.build-and-push-ecr-image.outputs.image }}
          cd /path/to/your/repo/on/runner
          export FLASK_IMAGE="$IMAGE"
          docker-compose -f docker-compose.prod.yml pull flask
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
